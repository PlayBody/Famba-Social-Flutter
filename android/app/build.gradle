def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '13'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '2.0.1'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

//def keystorePropertiesFile = rootProject.file("key.properties")
//def keystoreProperties = new Properties()
//keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        release {
            storeFile file('../../metadata/androidkey')
            storePassword '123456'
            keyAlias 'key0'
            keyPassword '123456'
        }
    }

    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.skycap.colibri"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
       /* ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86' ,'x86_64'
        } */
        //        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
    }

    buildTypes {

        debug {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
release {
                signingConfig signingConfigs.debug
            }
        // release {

        //     // TODO: Add your own signing config for the release build.
        //     // Signing with the debug keys for now, so `flutter run --release` works.

        //    /* splits {
        //         abi {
        //             enable true
        //             reset()
        //             include "armeabi-v7a", "arm64-v8a"
        //             universalApk true
        //         }
        //     }*/

        //     signingConfig signingConfigs.release

        //     ndk {
        //         abiFilters 'arm64-v8a', 'x86_64', 'x86', 'armeabi-v7a'
        //     }

        //     minifyEnabled true
        //     shrinkResources true
        //     useProguard true
        //     proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        // }
    }


    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    buildToolsVersion '29.0.3'
//    ndkVersion '21.3.6528147'
    ndkVersion '22.1.7171670'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-messaging:21.0.1'

    //implementation 'com.google.firebase:firebase-analytics-ktx'
}
